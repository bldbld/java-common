/*
 * 电信设备命令报文监视器
 * Encode:GBK
 * 2010.7
 */
package org.ballad.messagemonitor.main;

import javax.swing.*;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.io.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

/**
 * 
 * @author Guoba Moon
 */
public class MainFrame extends JFrame {

	// The main socket and main InputStream
	private Socket socket;
	private InputStream input;
	// the container of entries
	private ArrayList<String> msgArray = new ArrayList<String>();
	private Thread mainThread;
	private String fileName = "";
	private int maxCount = 0;
	private String deviceIp;
	private int devicePort;
	private String p2pServerIp;
	private int p2pServerPort;
	// the array of client peers
	private ArrayList<Socket> clientSockArr = new ArrayList();
	private MessageFilter mf = new MessageFilter();
	private boolean isFilterEnable = false;

	/** Creates new form MainFrame */
	public MainFrame() {
		initComponents();
		this.setTitle("Device Command Monitor");
		this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);
		setVisible(true);
		// The main thread to receive, display and save messages
		// not start yet
		mainThread = new Thread() {
			@Override
			public void run() {
				try {
					byte[] entry = new byte[1000];
					int n;
					// ByteArrayOutputStream is used to convert byte array to
					// string
					ByteArrayOutputStream bao = new ByteArrayOutputStream();
					boolean noticeP2P = false;
					while (true) {
						n = input.read(entry);
						if (noticeP2P == false) {
							startPeerServer();
							noticeP2P = true;
						}
						if (n == -1)
							throw new IOException();
						// share the data to peers who has already connected to
						// the local server
						writeToPeers(entry);
						bao.reset();
						bao.write(entry, 0, n);
						SimpleDateFormat format = new SimpleDateFormat(
								"[yy/mm/dd hh:mm:ss] ");
						// Add a new entry to array
						msgArray.add(format.format(new Date())
								+ bao.toString("US-ASCII"));
						// Display messages
						display();

						// Save to file
						if (maxCount > 0) {
							FileWriter fw = new FileWriter(fileName, false);
							fw.write(getEntries(maxCount));
							fw.flush();
							fw.close();
						}
					}
				}
				// if the socket is closed by the peer, we need to
				// connect the device at once
				catch (IOException ioe) {
					java.awt.event.ActionEvent evt = null;
					jButtonStartActionPerformed(evt);
				}
			}
		};
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new JLabel();
		jLabel2 = new JLabel();
		jTextFieldFilter = new JTextField();
		jButtonFilter = new JButton();
		jLabel3 = new JLabel();
		jLabel4 = new JLabel();
		jTextFieldFileName = new JTextField();
		jLabel5 = new JLabel();
		jTextFieldFileLength = new JTextField();
		jButtonSave = new JButton();
		jLabel6 = new JLabel();
		txtDeviceIp = new JTextField();
		jLabel7 = new JLabel();
		txtDevicePort = new JTextField();
		jLabelFilterPrompt = new JLabel();
		jLabelFilePrompt = new JLabel();
		jLabel8 = new JLabel();
		txtP2PserverIp = new JTextField();
		jLabel9 = new JLabel();
		txtP2PserverPort = new JTextField();
		jScrollPane1 = new JScrollPane();
		jTextPane1 = new JTextPane();
		jComboBox1 = new JComboBox();
		jButtonStart = new JButton();
		btnCreateNew = new JButton();
		jMenuBar1 = new JMenuBar();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setResizable(false);

		jLabel1.setText("监视窗");

		jLabel2.setText("过滤规则");

		jTextFieldFilter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldFilterActionPerformed(evt);
			}
		});

		jButtonFilter.setText("启用");
		jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonFilterActionPerformed(evt);
			}
		});

		jLabel3.setText("保存文件");

		jLabel4.setText("文件名");

		jLabel5.setText("最大报文数目");

		jButtonSave.setText("保存");
		jButtonSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonSaveActionPerformed(evt);
			}
		});

		jLabel6.setText("电信设备ip地址");

		txtDeviceIp.setText("127.0.0.1");

		jLabel7.setText("端口");

		txtDevicePort.setText("6666");

		jLabelFilterPrompt.setForeground(new Color(255, 51, 0));
		jLabelFilterPrompt.setText("   ");

		jLabelFilePrompt.setForeground(new Color(255, 51, 0));
		jLabelFilePrompt.setText("    ");

		jLabel8.setText("P2P服务器ip地址");

		txtP2PserverIp.setText("127.0.0.1");

		jLabel9.setText("端口");

		txtP2PserverPort.setText("8888");

		jScrollPane1.setViewportView(jTextPane1);

		jComboBox1.setModel(new DefaultComboBoxModel(new String[] {
				"满足", "不满足" }));

		jButtonStart.setText("开始");
		jButtonStart.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonStartActionPerformed(evt);
			}
		});

		btnCreateNew.setText("新建连接");
		btnCreateNew.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCreateNewActionPerformed(evt);
			}
		});
		setJMenuBar(jMenuBar1);

		GroupLayout layout = new GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.TRAILING)
														.addGroup(
																layout
																		.createParallelGroup(
																				GroupLayout.Alignment.LEADING)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								jLabel6)
																						.addComponent(
																								jLabel8))
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.TRAILING)
																						.addGroup(
																								GroupLayout.Alignment.LEADING,
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												jLabel3)
																										.addPreferredGap(
																												LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												jLabel4))
																						.addComponent(
																								jLabel2)))
														.addComponent(jLabel1))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabelFilePrompt)
																		.addContainerGap())
														.addGroup(
																layout
																		.createParallelGroup(
																				GroupLayout.Alignment.LEADING)
																		.addGroup(
																				layout
																						.createSequentialGroup()
																						.addGroup(
																								layout
																										.createParallelGroup(
																												GroupLayout.Alignment.LEADING)
																										.addGroup(
																												layout
																														.createSequentialGroup()
																														.addComponent(
																																jTextFieldFileName,
																																GroupLayout.PREFERRED_SIZE,
																																180,
																																GroupLayout.PREFERRED_SIZE)
																														.addPreferredGap(
																																LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																jLabel5)
																														.addPreferredGap(
																																LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																jTextFieldFileLength,
																																GroupLayout.PREFERRED_SIZE,
																																231,
																																GroupLayout.PREFERRED_SIZE))
																										.addGroup(
																												layout
																														.createSequentialGroup()
																														.addComponent(
																																jComboBox1,
																																GroupLayout.PREFERRED_SIZE,
																																GroupLayout.DEFAULT_SIZE,
																																GroupLayout.PREFERRED_SIZE)
																														.addPreferredGap(
																																LayoutStyle.ComponentPlacement.UNRELATED)
																														.addGroup(
																																layout
																																		.createParallelGroup(
																																				GroupLayout.Alignment.LEADING)
																																		.addComponent(
																																				jLabelFilterPrompt)
																																		.addComponent(
																																				jTextFieldFilter,
																																				GroupLayout.DEFAULT_SIZE,
																																				418,
																																				Short.MAX_VALUE))))
																						.addGap(
																								38,
																								38,
																								38)
																						.addGroup(
																								layout
																										.createParallelGroup(
																												GroupLayout.Alignment.TRAILING)
																										.addComponent(
																												jButtonFilter,
																												GroupLayout.DEFAULT_SIZE,
																												73,
																												Short.MAX_VALUE)
																										.addComponent(
																												jButtonSave,
																												GroupLayout.DEFAULT_SIZE,
																												73,
																												Short.MAX_VALUE))
																						.addGap(
																								57,
																								57,
																								57))
																		.addGroup(
																				layout
																						.createSequentialGroup()
																						.addGroup(
																								layout
																										.createParallelGroup(
																												GroupLayout.Alignment.TRAILING)
																										.addGroup(
																												GroupLayout.Alignment.LEADING,
																												layout
																														.createSequentialGroup()
																														.addGroup(
																																layout
																																		.createParallelGroup(
																																				GroupLayout.Alignment.LEADING)
																																		.addComponent(
																																				txtP2PserverIp,
																																				GroupLayout.DEFAULT_SIZE,
																																				170,
																																				Short.MAX_VALUE)
																																		.addComponent(
																																				txtDeviceIp,
																																				GroupLayout.Alignment.TRAILING,
																																				GroupLayout.DEFAULT_SIZE,
																																				170,
																																				Short.MAX_VALUE))
																														.addGap(
																																51,
																																51,
																																51)
																														.addGroup(
																																layout
																																		.createParallelGroup(
																																				GroupLayout.Alignment.LEADING,
																																				false)
																																		.addGroup(
																																				layout
																																						.createSequentialGroup()
																																						.addComponent(
																																								jLabel9)
																																						.addPreferredGap(
																																								LayoutStyle.ComponentPlacement.UNRELATED)
																																						.addComponent(
																																								txtP2PserverPort))
																																		.addGroup(
																																				layout
																																						.createSequentialGroup()
																																						.addComponent(
																																								jLabel7)
																																						.addPreferredGap(
																																								LayoutStyle.ComponentPlacement.UNRELATED)
																																						.addComponent(
																																								txtDevicePort,
																																								GroupLayout.PREFERRED_SIZE,
																																								122,
																																								GroupLayout.PREFERRED_SIZE)))
																														.addGap(
																																48,
																																48,
																																48)
																														.addComponent(
																																jButtonStart,
																																GroupLayout.PREFERRED_SIZE,
																																76,
																																GroupLayout.PREFERRED_SIZE)
																														.addGap(
																																29,
																																29,
																																29)
																														.addComponent(
																																btnCreateNew)
																														.addGap(
																																36,
																																36,
																																36))
																										.addComponent(
																												jScrollPane1,
																												GroupLayout.Alignment.LEADING,
																												GroupLayout.PREFERRED_SIZE,
																												611,
																												GroupLayout.PREFERRED_SIZE))
																						.addContainerGap())))));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(82, 82, 82)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.TRAILING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								btnCreateNew,
																								GroupLayout.PREFERRED_SIZE,
																								40,
																								GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jButtonStart,
																								GroupLayout.PREFERRED_SIZE,
																								40,
																								GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.UNRELATED))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.TRAILING)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addGroup(
																												layout
																														.createParallelGroup(
																																GroupLayout.Alignment.BASELINE)
																														.addComponent(
																																jLabel7)
																														.addComponent(
																																txtDevicePort,
																																GroupLayout.PREFERRED_SIZE,
																																GroupLayout.DEFAULT_SIZE,
																																GroupLayout.PREFERRED_SIZE))
																										.addGap(
																												18,
																												18,
																												18)
																										.addGroup(
																												layout
																														.createParallelGroup(
																																GroupLayout.Alignment.BASELINE)
																														.addComponent(
																																jLabel9)
																														.addComponent(
																																txtP2PserverPort,
																																GroupLayout.PREFERRED_SIZE,
																																GroupLayout.DEFAULT_SIZE,
																																GroupLayout.PREFERRED_SIZE)))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addGroup(
																												layout
																														.createParallelGroup(
																																GroupLayout.Alignment.BASELINE)
																														.addComponent(
																																txtDeviceIp,
																																GroupLayout.PREFERRED_SIZE,
																																GroupLayout.DEFAULT_SIZE,
																																GroupLayout.PREFERRED_SIZE)
																														.addComponent(
																																jLabel6))
																										.addGap(
																												18,
																												18,
																												18)
																										.addGroup(
																												layout
																														.createParallelGroup(
																																GroupLayout.Alignment.BASELINE)
																														.addComponent(
																																jLabel8)
																														.addComponent(
																																txtP2PserverIp,
																																GroupLayout.PREFERRED_SIZE,
																																GroupLayout.DEFAULT_SIZE,
																																GroupLayout.PREFERRED_SIZE))))
																		.addGap(
																				12,
																				12,
																				12)))
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addComponent(
																jScrollPane1,
																GroupLayout.PREFERRED_SIZE,
																299,
																GroupLayout.PREFERRED_SIZE)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				18,
																				18,
																				18)
																		.addComponent(
																				jLabel1)))
										.addGap(18, 18, 18)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel2)
																						.addComponent(
																								jComboBox1,
																								GroupLayout.PREFERRED_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jTextFieldFilter,
																								GroupLayout.PREFERRED_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(
																				jLabelFilterPrompt))
														.addComponent(
																jButtonFilter))
										.addGap(9, 9, 9)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel4)
														.addComponent(jLabel3)
														.addComponent(jLabel5)
														.addComponent(
																jTextFieldFileLength,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jTextFieldFileName,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jButtonSave))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jLabelFilePrompt,
												GroupLayout.PREFERRED_SIZE,
												16,
												GroupLayout.PREFERRED_SIZE)
										.addContainerGap(32, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jTextFieldFilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextFieldFilterActionPerformed

	}// GEN-LAST:event_jTextFieldFilterActionPerformed

	private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonStartActionPerformed
		try {
			this.txtDeviceIp.setEditable(false);
			this.txtDevicePort.setEditable(false);
			this.txtP2PserverIp.setEditable(false);
			this.txtP2PserverPort.setEditable(false);
			this.deviceIp = this.txtDeviceIp.getText().trim();
			this.devicePort = Integer.parseInt(this.txtDevicePort.getText()
					.trim());
			this.p2pServerIp = this.txtP2PserverIp.getText().trim();
			this.p2pServerPort = Integer.parseInt(this.txtP2PserverPort
					.getText().trim());

			// Connect to device, and get the inputstream
			// if there is already a connect on the device
			// the device should refuse this connect and we will handle
			// the exception.We can't test this.
			socket = new Socket(deviceIp, devicePort);
			// set the timeout value to 2 second
			// socket.connect(new InetSocketAddress(deviceIp,devicePort),2000 );
			input = socket.getInputStream();
			// Now it has successfully connected to the device
			// Start a server to dispatch packets to other peers
			// startPeerServer();
		} catch (NumberFormatException nfe) {
			JOptionPane.showMessageDialog(null, "Illegal port number!\n ",
					"Error", JOptionPane.ERROR_MESSAGE);
			return;
		} catch (java.net.UnknownHostException uhe) {
			JOptionPane.showMessageDialog(null,
					"Unknown Host!\n Please confirm the server IP!", "Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		// There is a connection already exists.Start P2P process.
		// SocketTimeoutException and IOException
		catch (Exception ioe) {
			ioe.printStackTrace();
			try {
				// wait for a random time.
				// because the P2Pserver may has not updated.
				Thread.sleep((long) (Math.random() * 1000));
				// Connect to P2Pserver
				Socket P2Psocket = new Socket(this.p2pServerIp, p2pServerPort);
				DataInputStream dis = dis = new DataInputStream(P2Psocket
						.getInputStream());
				DataOutputStream dos = new DataOutputStream(P2Psocket
						.getOutputStream());
				dos.writeBoolean(false);// a flag
				dos.writeUTF(this.deviceIp);
				String peerIp = dis.readUTF();
				int peerPort = dis.readInt();
				// this is the socket of the peer
				// but it's treated just as same as the real device!
				socket = new Socket(peerIp, peerPort);
				input = socket.getInputStream();
			} catch (Exception e) {

				JOptionPane
						.showMessageDialog(
								null,
								"Connection failed!\n P2P server may be down or not updated!",
								"Error", JOptionPane.ERROR_MESSAGE);
				return;
			}
		}

		// start the main thread
		if (!mainThread.isAlive())
			mainThread.start();
		this.jButtonStart.setEnabled(false);

	}// GEN-LAST:event_jButtonStartActionPerformed

	private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonFilterActionPerformed
		String filterRule = this.jTextFieldFilter.getText().trim();
		if (filterRule.equals("")) {
			isFilterEnable = false;
			return;
		}
		String prompt = mf.isFitrCorrect(filterRule);
		if (null != prompt) {
			isFilterEnable = false;
			this.jLabelFilterPrompt.setText(prompt);
			return;
		}
		this.jLabelFilterPrompt.setText("已启用过滤规则！");
		isFilterEnable = true;
	}// GEN-LAST:event_jButtonFilterActionPerformed

	private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButtonSaveActionPerformed

		fileName = this.jTextFieldFileName.getText().trim();
		try {
			maxCount = Integer.parseInt(this.jTextFieldFileLength.getText()
					.trim());
		} catch (Exception e) {
		}

		if (fileName.equals("") || maxCount <= 0) {
			JOptionPane.showMessageDialog(null, "Illegal parameters!",
					"Warning", JOptionPane.WARNING_MESSAGE);
			maxCount = 0;
		} else
			this.jLabelFilePrompt.setText("已开始保存！");
	}// GEN-LAST:event_jButtonSaveActionPerformed

	private void btnCreateNewActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCreateNewActionPerformed
		MainFrame mf2 = new MainFrame();
		// the address of P2P server can't be changed
		mf2.txtP2PserverIp.setText(p2pServerIp);
		mf2.txtP2PserverPort.setText(String.valueOf(p2pServerPort));
	}// GEN-LAST:event_btnCreateNewActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			// Change the UI theme : )
			UIManager
					.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception e) {
		}

		EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainFrame();
			}
		});
	}

	/**
	 * get entries by count and filter rules
	 */
	private String getEntries(int count) {
		String tempStr;
		int size = msgArray.size();
		if (count > size)
			count = size;
		StringBuilder temp = new StringBuilder();
		for (int i = 1; i <= count; i++) {
			tempStr = msgArray.get(size - i);
			temp.insert(temp.length(), tempStr + "\r\n");
		}
		return temp.toString();
	}

	/**
	 * Display datagram to the form
	 */
	private void display() {
		try {
			this.jTextPane1.getDocument().remove(0,
					jTextPane1.getDocument().getLength());
		} catch (Exception e) {
			e.printStackTrace();
		}
		String tempStr;
		for (int i = msgArray.size() - 1; i >= 0; i--) {
			tempStr = msgArray.get(i);
			// Join entries and filter them if required
			if (isFilterEnable) {
				// 当用户希望显示满足过滤条件的
				if (this.jComboBox1.getSelectedIndex() == 0) {
					if (mf.isMatch(tempStr)) {
						insert(tempStr + "\r\n", mf.getMatchedNum());
					}
				} else // 当用户希望不显示满足过滤条件的
				{
					if (!mf.isMatch(tempStr)) {
						insert(tempStr + "\r\n", null);
					}
				}
			} else {
				insert(tempStr + "\r\n", null);
			}

		}
	}

	/**
	 * 
	 * @param str
	 * @param al
	 */
	public void insert(String str, ArrayList<Integer> al) {
		SimpleAttributeSet attrSet = new SimpleAttributeSet();
		StyleConstants.setForeground(attrSet, Color.BLACK);
		StyledDocument doc = jTextPane1.getStyledDocument();
		int len = doc.getLength();
		try {

			doc.insertString(len, str, attrSet);
		} catch (Exception e) {
			System.out.println("BadLocationException:   " + e);
		}
		if (this.jComboBox1.getSelectedIndex() == 0 && isFilterEnable == true) {
			StyleConstants.setForeground(attrSet, Color.RED);
			for (int i = 0; i < al.size(); i = i + 2) {
				doc.setCharacterAttributes(len + (int) (al.get(i)), (int) (al
						.get(i + 1)), attrSet, true);
			}
		}
	}

	/**
	 * start a local server to send data to other peers just like the real
	 * device!
	 */
	private void startPeerServer() {
		new Thread() {
			@Override
			public void run() {
				try {
					// bind a random port
					ServerSocket localServer = new ServerSocket(0);
					// IMPORTANT! Notify the P2PServer about local address as a
					// peer
					Socket P2Psocket = new Socket(p2pServerIp, p2pServerPort);
					// DataInputStream dis = dis = new
					// DataInputStream(P2Psocket.getInputStream());
					DataOutputStream dos = new DataOutputStream(P2Psocket
							.getOutputStream());
					dos.writeBoolean(true);// a flag
					dos.writeUTF(deviceIp);
					dos.writeUTF(InetAddress.getLocalHost().getHostAddress());
					dos.writeInt(localServer.getLocalPort());
					dos.flush();
					P2Psocket.close();
					System.out.println("已经通知P2P服务器了");
					// start server
					while (true) {
						Socket newSock = localServer.accept();
						clientSockArr.add(newSock);
					}
				} catch (Exception e) {
					// try again
					startPeerServer();
				}
			}
		}.start();
	}

	/**
	 * write data to all the peers connected
	 * 
	 * @param data
	 *            the data to send
	 */
	private void writeToPeers(byte[] data) {
		OutputStream os = null;
		Socket s;
		for (int i = 0; i < clientSockArr.size(); i++) {
			s = clientSockArr.get(i);
			if (s.isClosed())
				clientSockArr.remove(i--);
			else {
				try {
					os = s.getOutputStream();
					os.write(data);
					os.flush();
				} catch (IOException ex) {
					ex.printStackTrace();
				}
			}
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton btnCreateNew;
	private JButton jButtonFilter;
	private JButton jButtonSave;
	private JButton jButtonStart;
	private JComboBox jComboBox1;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JLabel jLabel4;
	private JLabel jLabel5;
	private JLabel jLabel6;
	private JLabel jLabel7;
	private JLabel jLabel8;
	private JLabel jLabel9;
	private JLabel jLabelFilePrompt;
	private JLabel jLabelFilterPrompt;
	private JMenuBar jMenuBar1;
	private JScrollPane jScrollPane1;
	private JTextField jTextFieldFileLength;
	private JTextField jTextFieldFileName;
	private JTextField jTextFieldFilter;
	private JTextPane jTextPane1;
	private JTextField txtDeviceIp;
	private JTextField txtDevicePort;
	private JTextField txtP2PserverIp;
	private JTextField txtP2PserverPort;
	// End of variables declaration//GEN-END:variables

}
