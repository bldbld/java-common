/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * P2PServer.java
 *
 * Created on 2010-7-9, 12:48:12
 */

package org.ballad.messagemonitor.test;

import javax.swing.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Hashtable;

/**
 * 
 * @author 唐朝翅膀
 */
public class P2PServer extends JFrame {

	int localPort;
	Thread mainThread = null;
	ServerSocket ss = null;
	Socket s = null;
	DataInputStream dis = null;
	DataOutputStream dos = null;
	boolean flag = true;
	String peerIp = null;
	int peerPort = 0;
	String deviceIp = null;
	Hashtable<String, InetSocketAddress> ht = new Hashtable<String, InetSocketAddress>();

	/** Creates new form P2PServer */
	public P2PServer() {
		initComponents();
		this.setTitle("P2P服务器");
		localPort = Integer.parseInt(this.txtPort.getText().trim());
		mainThread = new Thread() {
			@Override
			public void run() {
				try {
					ss = new ServerSocket(localPort);
					while (true) {
						s = ss.accept();
						dis = new DataInputStream(s.getInputStream());
						dos = new DataOutputStream(s.getOutputStream());
						flag = dis.readBoolean();
						if (flag == true)// 此时说明客户端是来通报自己的服务器信息的
						{
							deviceIp = dis.readUTF();
							peerIp = dis.readUTF();
							peerPort = dis.readInt();
							ht.remove(deviceIp);
							ht.put(deviceIp, new InetSocketAddress(peerIp,
									peerPort));
							s.close();
							System.out.println(flag + "," + deviceIp + ","
									+ peerIp + "," + peerPort);
						} else// 此时说明客户端是来查询自己相要连接的Peer的服务器信息的
						{
							deviceIp = dis.readUTF();
							System.out.println(deviceIp);
							peerIp = ht.get(deviceIp).getHostName();
							peerPort = ht.get(deviceIp).getPort();
							dos.writeUTF(peerIp);
							dos.writeInt(peerPort);
							dos.flush();
							s.close();
							System.out.println(flag + "," + deviceIp + ","
									+ peerIp + "," + peerPort);
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(null, "Application stopped!",
							"Error", JOptionPane.ERROR_MESSAGE);
					return;
				}
			}
		};

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new JLabel();
		txtPort = new JTextField();
		btnStart = new JButton();
		btnQuit = new JButton();
		jLabel2 = new JLabel();
		lblPrompt = new JLabel();

		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("请输入要绑定的端口号：");
		jLabel1.setName("jLabel1"); // NOI18N

		txtPort.setText("8888");
		txtPort.setName("txtPort"); // NOI18N

		btnStart.setText("启动服务器");
		btnStart.setName("btnStart"); // NOI18N
		btnStart.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnStartActionPerformed(evt);
			}
		});

		btnQuit.setText("退出");
		btnQuit.setName("btnQuit"); // NOI18N
		btnQuit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnQuitActionPerformed(evt);
			}
		});

		jLabel2.setForeground(new java.awt.Color(255, 0, 0));
		jLabel2.setText("说明：此服务器用于向报文监视器提供P2P的功能，需要在运行报文监视器之前启动并一直运行！");
		jLabel2.setName("jLabel2"); // NOI18N

		lblPrompt.setForeground(new java.awt.Color(51, 0, 255));
		lblPrompt.setText("服务器尚未启动！");
		lblPrompt.setName("lblPrompt"); // NOI18N

		GroupLayout layout = new GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jLabel2))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				125,
																				125,
																				125)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel1,
																								GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								btnStart,
																								GroupLayout.Alignment.TRAILING,
																								GroupLayout.PREFERRED_SIZE,
																								109,
																								GroupLayout.PREFERRED_SIZE))
																		.addGap(
																				23,
																				23,
																				23)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								btnQuit,
																								GroupLayout.PREFERRED_SIZE,
																								84,
																								GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								txtPort,
																								GroupLayout.PREFERRED_SIZE,
																								98,
																								GroupLayout.PREFERRED_SIZE))
																		.addGap(
																				18,
																				18,
																				18)
																		.addComponent(
																				lblPrompt)))
										.addContainerGap(
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGap(30, 30, 30)
										.addComponent(jLabel2)
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED,
												53, Short.MAX_VALUE)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(
																txtPort,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addGap(66, 66, 66)
										.addGroup(
												layout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																btnStart,
																GroupLayout.PREFERRED_SIZE,
																37,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btnQuit,
																GroupLayout.PREFERRED_SIZE,
																37,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(lblPrompt))
										.addGap(38, 38, 38)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnStartActionPerformed
		try {
			if (!mainThread.isAlive()) {
				mainThread.start();
				this.txtPort.setEditable(false);
				this.lblPrompt.setText("服务器已经启动！");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_btnStartActionPerformed

	private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnQuitActionPerformed
		int choice = JOptionPane.showConfirmDialog(null,
				"关闭服务器后将导致P2P功能停止，这意味着任意时刻最多" + "只能有一台报文监视器收到来自某一台电信设备的信息！\n"
						+ "您确认要退出吗？", "警告", JOptionPane.YES_NO_OPTION,
				JOptionPane.WARNING_MESSAGE);
		if (choice == 0)// 用户确认退出
		{
			System.exit(0);
		}
	}// GEN-LAST:event_btnQuitActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			// Change the UI theme : )
			UIManager
					.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception e) {
		}

		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new P2PServer().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton btnQuit;
	private JButton btnStart;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel lblPrompt;
	private JTextField txtPort;
	// End of variables declaration//GEN-END:variables

}
